/*******************************************************************************
 * Copyright (c) 2010 Robert "Unlogic" Olofsson (unlogic@unlogic.se).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v3
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-3.0-standalone.html
 ******************************************************************************/
package se.unlogic.hierarchy.foregroundmodules.gallery.beans;

import java.util.Collection;
import java.util.List;

import se.unlogic.hierarchy.core.interfaces.AccessInterface;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.SimplifiedRelation;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;

@Table(name = "galleries")
@XMLElement
public class Gallery extends GeneratedElementable implements AccessInterface {

	@DAOManaged(autoGenerated = true)
	@Key
	@XMLElement
	private Integer galleryID;

	@DAOManaged
	@OrderBy
	@WebPopulate(maxLength = 255, required = true)
	@XMLElement(cdata = true)
	private String name;

	@DAOManaged
	@WebPopulate(maxLength = 65535, required = true)
	@XMLElement(cdata = true)
	private String description;

	@DAOManaged
	@WebPopulate(maxLength = 255, required = true)
	@XMLElement(cdata = true)
	private String alias;

	@DAOManaged
	@WebPopulate(maxLength = 255, required = true)
	@XMLElement
	private String directory;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean allowsAdminAccess;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean allowsAnonymousAccess;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean allowsUserAccess;

	@DAOManaged
	@OneToMany(autoGet = true)
	@SimplifiedRelation(table = "gallery_groups", remoteValueColumnName = "groupID")
	@WebPopulate
	@XMLElement(childName = "groupID")
	private List<Integer> allowedGroupIDs;

	@DAOManaged
	@OneToMany(autoGet = true)
	@SimplifiedRelation(table = "gallery_users", remoteValueColumnName = "userID")
	@WebPopulate
	@XMLElement(childName = "userID")
	private List<Integer> allowedUserIDs;

	@DAOManaged
	@OneToMany(autoGet = true)
	@SimplifiedRelation(table = "gallery_upload_groups", remoteValueColumnName = "groupID")
	@WebPopulate
	@XMLElement(childName = "groupID")
	private List<Integer> allowedUploadGroupIDs;

	@DAOManaged
	@OneToMany(autoGet = true)
	@SimplifiedRelation(table = "gallery_upload_users", remoteValueColumnName = "userID")
	@WebPopulate
	@XMLElement(childName = "userID")
	private List<Integer> allowedUploadUserIDs;

	@DAOManaged
	@OneToMany
	@XMLElement
	private List<Image> images;

	@Override
	public boolean allowsAdminAccess() {

		return allowsAdminAccess;
	}

	@Override
	public boolean allowsUserAccess() {

		return allowsUserAccess;
	}

	@Override
	public boolean allowsAnonymousAccess() {

		return allowsAnonymousAccess;
	}

	@Override
	public Collection<Integer> getAllowedGroupIDs() {

		return allowedGroupIDs;
	}

	@Override
	public Collection<Integer> getAllowedUserIDs() {

		return allowedUserIDs;
	}

	public Integer getGalleryID() {

		return galleryID;
	}

	public void setGalleryID(Integer galleryID) {

		this.galleryID = galleryID;
	}

	public String getName() {

		return name;
	}

	public void setName(String name) {

		this.name = name;
	}

	public String getDescription() {

		return description;
	}

	public void setDescription(String description) {

		this.description = description;
	}

	public String getAlias() {

		return alias;
	}

	public void setAlias(String alias) {

		this.alias = alias;
	}

	public String getDirectory() {

		return directory;
	}

	public void setDirectory(String folder) {

		this.directory = folder;
	}

	public List<Integer> getAllowedUploadGroupIDs() {

		return allowedUploadGroupIDs;
	}

	public void setAllowedUploadGroupIDs(List<Integer> allowedUploadGroupIDs) {

		this.allowedUploadGroupIDs = allowedUploadGroupIDs;
	}

	public List<Integer> getAllowedUploadUserIDs() {

		return allowedUploadUserIDs;
	}

	public void setAllowedUploadUserIDs(List<Integer> allowedUploadUserIDs) {

		this.allowedUploadUserIDs = allowedUploadUserIDs;
	}

	public List<Image> getImages() {

		return images;
	}

	public void setImages(List<Image> images) {

		this.images = images;
	}

	public void setAllowsAdminAccess(boolean allowsAdminAccess) {

		this.allowsAdminAccess = allowsAdminAccess;
	}

	public void setAllowsAnonymousAccess(boolean allowsAnonymousAccess) {

		this.allowsAnonymousAccess = allowsAnonymousAccess;
	}

	public void setAllowsUserAccess(boolean allowsUserAccess) {

		this.allowsUserAccess = allowsUserAccess;
	}

	public void setAllowedGroupIDs(List<Integer> allowedGroupIDs) {

		this.allowedGroupIDs = allowedGroupIDs;
	}

	public void setAllowedUserIDs(List<Integer> allowedUserIDs) {

		this.allowedUserIDs = allowedUserIDs;
	}

	@Override
	public String toString() {

		return this.name + "(ID: " + galleryID + ")";
	}

	@Override
	public int hashCode() {

		final int prime = 31;
		int result = 1;
		result = prime * result + ((galleryID == null) ? 0 : galleryID.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {

		if(this == obj){
			return true;
		}
		if(obj == null){
			return false;
		}
		if(getClass() != obj.getClass()){
			return false;
		}
		Gallery other = (Gallery)obj;
		if(galleryID == null){
			if(other.galleryID != null){
				return false;
			}
		}else if(!galleryID.equals(other.galleryID)){
			return false;
		}
		return true;
	}
}
