/*******************************************************************************
 * Copyright (c) 2010 Robert "Unlogic" Olofsson (unlogic@unlogic.se).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v3
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-3.0-standalone.html
 ******************************************************************************/
package se.unlogic.hierarchy.foregroundmodules.news;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.sql.Timestamp;
import java.util.Comparator;
import java.util.regex.Pattern;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import se.unlogic.hierarchy.core.beans.User;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.xml.Elementable;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLGenerator;
import se.unlogic.standardutils.xml.XMLUtils;

@XMLElement(name="news")
@Table(name="news")
public class News implements Elementable{

	public static final Pattern PERCENT_PATTERN = Pattern.compile("%(?![0-9a-fA-F]{2})"); 
	public static final String RELATIVE_PATH_MARKER = "/@";

	@DAOManaged(autoGenerated=true)
	@Key
	@XMLElement
	private Integer newsID;

	@DAOManaged
	@XMLElement
	@WebPopulate(required=true,maxLength=45)	
	private String title;

	@DAOManaged
	@XMLElement
	private Integer sectionID;

	@DAOManaged
	@XMLElement
	@WebPopulate(required=true)
	private boolean enabled;

	private static Comparator<News> defaultComparator = new DefaultComparator();

	@DAOManaged
	@WebPopulate(required=true,maxLength=65536)
	private String text;

	private String unescapedText;

	@DAOManaged(columnName="posterID")
	@XMLElement(childName="poster")
	private User poster;

	@DAOManaged(columnName="editorID")
	@XMLElement
	private User editor;

	@DAOManaged
	@OrderBy
	@XMLElement
	private Timestamp added;

	@DAOManaged
	@XMLElement
	private Timestamp updated;


	public Integer getNewsID() {
		return newsID;
	}


	public void setNewsID(Integer newsID) {
		this.newsID = newsID;
	}


	public void setSectionID(Integer sectionID) {
		this.sectionID = sectionID;
	}


	public Integer getSectionID() {
		return sectionID;
	}

	public Boolean isEnabled() {
		return enabled;
	}

	public void setEnabled(Boolean enabled) {

		this.enabled = enabled;
	}

	public String getText() {
		return text;
	}


	public void setText(String text) {
		this.text = text;
	}
	
	public String getUnescapedText() {

		if(this.unescapedText == null){

			unescapedText = PERCENT_PATTERN.matcher(text).replaceAll("%25");
			try {
				unescapedText = URLDecoder.decode(unescapedText,"UTF-8");
			} catch (UnsupportedEncodingException e) {
				throw new RuntimeException(e);
			}			
		}

		return unescapedText;
	}

	public User getPoster() {
		return poster;
	}


	public void setPoster(User poster) {
		this.poster = poster;
	}

	public User getEditor() {
		return editor;
	}

	public void setEditor(User editor) {
		this.editor = editor;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}


	public Timestamp getAdded() {
		return added;
	}


	public void setAdded(Timestamp added) {
		this.added = added;
	}


	public Timestamp getUpdated() {
		return updated;
	}


	public void setUpdated(Timestamp updated) {
		this.updated = updated;
	}

	@Override
	public String toString(){
		return this.getTitle();
	}


	@Override
	public Element toXML(Document doc) {

		return toXML(doc, null);
	}

	public Element toXML(Document doc, String text) {

		Element element = XMLGenerator.toXML(this, doc);

		if (text != null) {

			element.appendChild(XMLUtils.createCDATAElement("text", text, doc));

		} else {

			element.appendChild(XMLUtils.createCDATAElement("text", this.text, doc));
		}

		return element;
	}

	private static class DefaultComparator implements Comparator<News> {

		@Override
		public int compare(News publication1, News publication2) {
			return publication1.getAdded().compareTo(publication2.getAdded()) * -1;
		}
	}

	public static Comparator<News> getDefaultComparator() {
		return News.defaultComparator;
	}


	public static void setDefaultComparator(Comparator<News> defaultComparator) {
		News.defaultComparator = defaultComparator;
	}


	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((newsID == null) ? 0 : newsID.hashCode());
		return result;
	}


	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		News other = (News) obj;
		if (newsID == null) {
			if (other.newsID != null)
				return false;
		} else if (!newsID.equals(other.newsID))
			return false;
		return true;
	}
}

