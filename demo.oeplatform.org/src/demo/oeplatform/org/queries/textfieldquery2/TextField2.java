package demo.oeplatform.org.queries.textfieldquery2;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import se.unlogic.standardutils.annotations.RequiredIfSet;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.populators.PositiveStringIntegerPopulator;
import se.unlogic.standardutils.populators.StringPopulator;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.validation.ValidationError;
import se.unlogic.standardutils.validation.ValidationException;
import se.unlogic.standardutils.xml.GeneratedElementable;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLParser;
import se.unlogic.standardutils.xml.XMLParserPopulateable;
import se.unlogic.standardutils.xml.XMLValidationUtils;

@Table(name = "text_fields2")
@XMLElement
public class TextField2 extends GeneratedElementable implements Serializable, XMLParserPopulateable {

	public static Field TEXT_FIELD_QUERY_RELATION = ReflectionUtils.getField(TextField2.class, "query");
	
	private static final long serialVersionUID = 8919797448020843470L;

	@DAOManaged(autoGenerated = true)
	@Key
	@XMLElement
	private Integer textFieldID;

	@DAOManaged
	@WebPopulate(required = true, maxLength = 255)
	@XMLElement
	private String label;

	@DAOManaged
	@WebPopulate
	@XMLElement
	private boolean required;

	@DAOManaged
	@WebPopulate(populator=PositiveStringIntegerPopulator.class)
	@XMLElement
	private Integer width;

	@DAOManaged
	@WebPopulate(populator=PositiveStringIntegerPopulator.class)
	@XMLElement
	private Integer maxContentLength;

	@DAOManaged
	@OrderBy
	@XMLElement
	private Integer sortIndex;

	@DAOManaged
	@WebPopulate
	@OrderBy
	@XMLElement
	private String formatValidator;

	@DAOManaged
	@OrderBy
	@WebPopulate(maxLength=255)
	@RequiredIfSet(paramName="formatValidator")
	@XMLElement
	private String invalidFormatMessage;	
	
	@DAOManaged(columnName = "queryID")
	@ManyToOne
	@XMLElement
	private TextField2Query query;

	@DAOManaged
	@OneToMany
	@XMLElement
	private List<TextField2Value> values;

	public TextField2() {

	}

	public Integer getTextFieldID() {

		return textFieldID;
	}

	public void setTextFieldID(Integer textFieldID) {

		this.textFieldID = textFieldID;
	}

	public TextField2Query getQuery() {

		return query;
	}

	public void setQuery(TextField2Query query) {

		this.query = query;
	}

	public String getLabel() {

		return label;
	}

	public void setLabel(String name) {

		this.label = name;
	}

	@Override
	public String toString() {

		return label + " (textFieldID: " + textFieldID + ")";
	}

	public boolean isRequired() {

		return required;
	}

	public void setRequired(boolean required) {

		this.required = required;
	}

	public Integer getWidth() {

		return width;
	}

	public void setWidth(Integer width) {

		this.width = width;
	}

	public List<TextField2Value> getValues() {

		return values;
	}

	public void setValues(List<TextField2Value> values) {

		this.values = values;
	}

	public Integer getSortIndex() {

		return sortIndex;
	}

	public void setSortIndex(Integer sortIndex) {

		this.sortIndex = sortIndex;
	}

	public String getFormatValidator() {

		return formatValidator;
	}

	public void setFormatValidator(String formatValidator) {

		this.formatValidator = formatValidator;
	}

	public Integer getMaxContentLength() {

		return maxContentLength;
	}

	public void setMaxContentLength(Integer maxContentLength) {

		this.maxContentLength = maxContentLength;
	}

	
	public String getInvalidFormatMessage() {
	
		return invalidFormatMessage;
	}

	
	public void setInvalidFormatMessage(String invalidFormatMessage) {
	
		this.invalidFormatMessage = invalidFormatMessage;
	}

	@Override
	public void populate(XMLParser xmlParser) throws ValidationException {

		List<ValidationError> errors = new ArrayList<ValidationError>();
		
		label = XMLValidationUtils.validateParameter("label", xmlParser, true, 1, 255, StringPopulator.getPopulator(), errors);
		required = xmlParser.getPrimitiveBoolean("required");
		
		width = XMLValidationUtils.validateParameter("width", xmlParser, false, PositiveStringIntegerPopulator.getPopulator(), errors);
		maxContentLength = XMLValidationUtils.validateParameter("maxContentLength", xmlParser, false, PositiveStringIntegerPopulator.getPopulator(), errors);
		
		sortIndex = XMLValidationUtils.validateParameter("sortIndex", xmlParser, true, PositiveStringIntegerPopulator.getPopulator(), errors);
		formatValidator = XMLValidationUtils.validateParameter("formatValidator", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);
		invalidFormatMessage = XMLValidationUtils.validateParameter("invalidFormatMessage", xmlParser, false, 1, 255, StringPopulator.getPopulator(), errors);
		
		if(!errors.isEmpty()){

			throw new ValidationException(errors);
		}
		
	}
}
