package se.unlogic.hierarchy.foregroundmodules.minimaluser;

import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import se.unlogic.hierarchy.core.beans.Group;
import se.unlogic.hierarchy.core.beans.MutableUser;
import se.unlogic.hierarchy.core.handlers.SourceAttributeHandler;
import se.unlogic.hierarchy.core.interfaces.AttributeSource;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.SimplifiedRelation;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.i18n.Language;
import se.unlogic.standardutils.reflection.ReflectionUtils;

/**
 * A minimalistic {@link MutableUser} implementation that does not contain dedicated fields for username, email or password (these fields are stored as attributes instead).
 * <br>
 * This implementation is geared towards single sign-on modules and similar solutions where username, email or password may not be available for the users.
 * 
 * @author Robert "Unlogic" Olofsson
 *
 */
@Table(name = "minimal_users")
public class MinimalUser extends MutableUser implements AttributeSource{

	private static final long serialVersionUID = 187146686333505355L;

	public static final Field GROUPS_RELATION = ReflectionUtils.getField(MinimalUser.class, "groups");
	public static final Field ATTRIBUTES_RELATION = ReflectionUtils.getField(MinimalUser.class, "attributes");

	private SourceAttributeHandler attributeHandler;

	@Key
	@DAOManaged(autoGenerated=true)
	private Integer userID;

	@DAOManaged
	private Timestamp added;

	@DAOManaged
	@OrderBy
	private String firstname;

	@DAOManaged
	@OrderBy
	private String lastname;

	@DAOManaged
	private Language language;

	@DAOManaged
	private boolean admin;

	@DAOManaged
	@WebPopulate
	private boolean enabled;

	@DAOManaged
	private Timestamp lastLogin;

	@DAOManaged
	private String preferedDesign;

	private Timestamp currentLogin;

	protected Integer providerID;

	private boolean formProvider;

	@DAOManaged
	@OneToMany
	@SimplifiedRelation(table="minimal_user_groups",remoteKeyColumnName="userID",remoteValueColumnName="groupID")
	private List<Group> groups;

	@DAOManaged
	@OneToMany
	private List<MinimalUserAttribute> attributes;

	@Override
	public String getUsername() {

		return getAttributeHandler().getString("username");
	}

	@Override
	@WebPopulate(required=false,maxLength=40)
	public void setUsername(String username) {

		getAttributeHandler().setAttribute("username", username);
	}

	@Override
	public void setGroups(List<Group> groups) {
		this.groups = groups;
	}

	@Override
	public Collection<Group> getGroups() {

		return this.groups;
	}

	@Override
	public Integer getUserID() {
		return userID;
	}

	@Override
	public void setUserID(Integer userID) {
		this.userID = userID;
	}

	@Override
	public Timestamp getAdded() {
		return added;
	}

	public void setAdded(Timestamp added) {
		this.added = added;
	}

	@Override
	public String getEmail() {

		return getAttributeHandler().getString("email");
	}

	@Override
	@WebPopulate(required=true,maxLength=255,populatorID="email")
	public void setEmail(String email) {

		getAttributeHandler().setAttribute("email", email);
	}

	@Override
	public String getFirstname() {
		return firstname;
	}

	@Override
	@WebPopulate(required=true,maxLength=30)
	public void setFirstname(String firstname) {
		this.firstname = firstname;
	}

	@Override
	public String getLastname() {
		return lastname;
	}

	@Override
	@WebPopulate(required=true,maxLength=40)
	public void setLastname(String lastname) {
		this.lastname = lastname;
	}

	@Override
	public String getPassword() {

		return getAttributeHandler().getString("password");
	}

	@Override
	@WebPopulate(maxLength=255)
	//TODO @PopulateOnlyIfSet(paramNames="setpassword")
	public void setPassword(String password) {

		getAttributeHandler().setAttribute("password", password);
	}

	@Override
	public Language getLanguage() {
		return language;
	}

	@Override
	public void setLanguage(Language language) {
		this.language = language;
	}

	@Override
	public boolean isAdmin() {
		return admin;
	}

	@Override
	@WebPopulate
	public void setAdmin(boolean admin) {
		this.admin = admin;
	}

	@Override
	public boolean isEnabled() {
		return enabled;
	}

	@Override
	@WebPopulate
	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}

	@Override
	public Timestamp getLastLogin() {
		return lastLogin;
	}

	@Override
	public void setLastLogin(Timestamp lastLogin) {
		this.lastLogin = lastLogin;
	}

	@Override
	public String getPreferedDesign() {
		return preferedDesign;
	}

	public void setPreferedDesign(String preferedDesign) {
		this.preferedDesign = preferedDesign;
	}

	@Override
	public Timestamp getCurrentLogin() {
		return currentLogin;
	}

	@Override
	public void setCurrentLogin(Timestamp currentLogin) {
		this.currentLogin = currentLogin;
	}

	public Integer getProviderID() {
		return providerID;
	}

	public void setProviderID(Integer providerID) {
		this.providerID = providerID;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	@Override
	public synchronized SourceAttributeHandler getAttributeHandler() {

		if(attributeHandler == null){

			this.attributeHandler = new SourceAttributeHandler(this, 255, 1024);
		}

		return attributeHandler;
	}

	public List<MinimalUserAttribute> getAttributes() {

		return attributes;
	}

	public void setAttributes(List<MinimalUserAttribute> attributes) {

		this.attributes = attributes;
	}

	public void addAttribute(String name, String value) {

		if(this.attributes == null){

			attributes = new ArrayList<MinimalUserAttribute>();
		}

		attributes.add(new MinimalUserAttribute(name, value));
	}

	@Override
	public boolean hasFormProvider() {

		return formProvider;
	}


	public void setFormProvider(boolean formProvider) {

		this.formProvider = formProvider;
	}
}
